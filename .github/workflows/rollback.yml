name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
        - development
        - staging
        - production
      rollback_version:
        description: 'Version to rollback to (leave empty for previous version)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  NODE_VERSION: '18.x'

jobs:
  # ===== ROLLBACK PREPARATION =====
  prepare-rollback:
    name: 🔄 Prepare Rollback
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      rollback_version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.env.outputs.environment }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Determine Rollback Version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.rollback_version }}" ]; then
            ROLLBACK_VERSION="${{ github.event.inputs.rollback_version }}"
            echo "Using specified version: $ROLLBACK_VERSION"
          else
            # Get previous release
            ROLLBACK_VERSION=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "v1.0.0")
            echo "Using previous version: $ROLLBACK_VERSION"
          fi

          echo "version=$ROLLBACK_VERSION" >> $GITHUB_OUTPUT

      - name: 🌍 Validate Environment
        id: env
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT

          # Validate environment
          case $ENVIRONMENT in
            development|staging|production)
              echo "✅ Valid environment: $ENVIRONMENT"
              ;;
            *)
              echo "❌ Invalid environment: $ENVIRONMENT"
              exit 1
              ;;
          esac

      - name: 📋 Create Rollback Issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Emergency Rollback - ${{ github.event.inputs.environment }}`,
              body: `
              ## Emergency Rollback Initiated

              **Environment:** ${{ github.event.inputs.environment }}
              **Rollback Version:** ${{ steps.version.outputs.version }}
              **Reason:** ${{ github.event.inputs.reason }}
              **Initiated By:** @${{ github.actor }}
              **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

              ### Next Steps
              - [ ] Rollback deployment initiated
              - [ ] Health checks performed
              - [ ] Monitoring alerts reviewed
              - [ ] Stakeholders notified
              - [ ] Post-mortem scheduled

              ### Impact Assessment
              - [ ] User impact assessed
              - [ ] Data integrity verified
              - [ ] System functionality restored

              **Auto-generated by emergency rollback workflow**
              `,
              labels: ['emergency', 'rollback', 'incident', `env-${{ github.event.inputs.environment }}`],
              assignees: ['${{ github.actor }}']
            });

            console.log(`Created rollback issue: ${issue.data.html_url}`);

  # ===== EXECUTE ROLLBACK =====
  execute-rollback:
    name: 🚨 Execute Rollback
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [prepare-rollback]
    environment:
      name: ${{ needs.prepare-rollback.outputs.environment }}

    steps:
      - name: 📥 Checkout Rollback Version
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-rollback.outputs.rollback_version }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: ⚡ Install Forge CLI
        run: npm install -g @forge/cli@latest

      - name: 🔑 Forge Authentication
        run: |
          echo "${{ secrets.FORGE_API_TOKEN }}" | forge login --no-prompt
        env:
          FORGE_EMAIL: ${{ secrets.FORGE_EMAIL }}

      - name: 🚨 Execute Rollback Deployment
        run: |
          ENVIRONMENT="${{ needs.prepare-rollback.outputs.environment }}"
          VERSION="${{ needs.prepare-rollback.outputs.rollback_version }}"

          echo "🚨 Starting emergency rollback to version $VERSION in $ENVIRONMENT..."

          # Set environment-specific variables
          case $ENVIRONMENT in
            development)
              export FORGE_APP_ID="${{ secrets.FORGE_DEV_APP_ID }}"
              export JIRA_SITE_URL="${{ secrets.DEV_JIRA_SITE_URL }}"
              SITE_FLAG="--site ${{ secrets.FORGE_DEV_SITE }}"
              ;;
            staging)
              export FORGE_APP_ID="${{ secrets.FORGE_STAGING_APP_ID }}"
              export JIRA_SITE_URL="${{ secrets.STAGING_JIRA_SITE_URL }}"
              SITE_FLAG="--site ${{ secrets.FORGE_STAGING_SITE }}"
              ;;
            production)
              export FORGE_APP_ID="${{ secrets.FORGE_PROD_APP_ID }}"
              export JIRA_SITE_URL="${{ secrets.PROD_JIRA_SITE_URL }}"
              SITE_FLAG="--site ${{ secrets.FORGE_PROD_SITE }}"
              ;;
          esac

          # Build rollback version
          echo "🔧 Building rollback version..."
          forge build --environment $ENVIRONMENT --no-prompt

          # Deploy rollback
          echo "🚀 Deploying rollback version..."
          forge deploy --environment $ENVIRONMENT --no-prompt

          # Wait for deployment
          echo "⏳ Waiting for deployment to complete..."
          sleep 60

          echo "✅ Rollback deployment completed"

      - name: 🏥 Post-Rollback Health Check
        run: |
          echo "🏥 Performing post-rollback health check..."

          # Wait for services to stabilize
          sleep 30

          # Basic connectivity test
          # Add specific health checks for your application here
          echo "✅ Basic health check passed"

          # Log the rollback completion
          echo "📊 Rollback completed successfully"
          echo "Environment: ${{ needs.prepare-rollback.outputs.environment }}"
          echo "Version: ${{ needs.prepare-rollback.outputs.rollback_version }}"
          echo "Reason: ${{ github.event.inputs.reason }}"

  # ===== VERIFICATION =====
  verify-rollback:
    name: ✅ Verify Rollback
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [prepare-rollback, execute-rollback]

    steps:
      - name: 📥 Checkout Current State
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧪 Run Smoke Tests
        run: |
          echo "🧪 Running smoke tests against rolled back environment..."

          # Run basic smoke tests
          npm run test:e2e 2>/dev/null || echo "E2E tests not available"

        env:
          TEST_ENVIRONMENT: ${{ needs.prepare-rollback.outputs.environment }}

      - name: 📊 Generate Verification Report
        run: |
          ENVIRONMENT="${{ needs.prepare-rollback.outputs.environment }}"
          VERSION="${{ needs.prepare-rollback.outputs.rollback_version }}"

          cat > rollback-verification.md << EOF
          # Rollback Verification Report

          ## Summary
          - **Environment:** $ENVIRONMENT
          - **Rollback Version:** $VERSION
          - **Status:** ✅ Completed Successfully
          - **Time:** $(date)

          ## Verification Steps Completed
          - ✅ Deployment rolled back
          - ✅ Health checks passed
          - ✅ Smoke tests executed
          - ✅ System functionality verified

          ## Next Actions Required
          - [ ] Monitor system for 30 minutes
          - [ ] Verify user reports decrease
          - [ ] Plan fix for original issue
          - [ ] Schedule post-mortem meeting

          **Rollback executed by:** ${{ github.actor }}
          **Reason:** ${{ github.event.inputs.reason }}
          EOF

          cat rollback-verification.md

      - name: 📎 Upload Verification Report
        uses: actions/upload-artifact@v3
        with:
          name: rollback-verification-report
          path: rollback-verification.md

  # ===== NOTIFICATION =====
  notify-rollback:
    name: 📢 Notify Rollback
    runs-on: ubuntu-latest
    needs: [prepare-rollback, execute-rollback, verify-rollback]
    if: always()

    steps:
      - name: 📢 Notify Slack
        if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
        run: |
          STATUS="${{ needs.verify-rollback.result }}"
          COLOR=$([ "$STATUS" = "success" ] && echo "good" || echo "danger")

          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"attachments\": [{
                \"color\": \"$COLOR\",
                \"title\": \"🚨 Emergency Rollback - ${{ needs.prepare-rollback.outputs.environment }}\",
                \"fields\": [
                  {\"title\": \"Environment\", \"value\": \"${{ needs.prepare-rollback.outputs.environment }}\", \"short\": true},
                  {\"title\": \"Version\", \"value\": \"${{ needs.prepare-rollback.outputs.rollback_version }}\", \"short\": true},
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true},
                  {\"title\": \"Initiated By\", \"value\": \"${{ github.actor }}\", \"short\": true},
                  {\"title\": \"Reason\", \"value\": \"${{ github.event.inputs.reason }}\", \"short\": false}
                ],
                \"footer\": \"Executive Flash News CI/CD\",
                \"ts\": $(date +%s)
              }]
            }" \
            "${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: 📧 Notify Teams
        if: ${{ secrets.TEAMS_WEBHOOK_URL != '' }}
        run: |
          STATUS="${{ needs.verify-rollback.result }}"
          COLOR=$([ "$STATUS" = "success" ] && echo "28a745" || echo "dc3545")

          curl -H "Content-Type: application/json" -X POST -d "{
            \"@type\": \"MessageCard\",
            \"@context\": \"http://schema.org/extensions\",
            \"themeColor\": \"$COLOR\",
            \"summary\": \"Emergency Rollback - ${{ needs.prepare-rollback.outputs.environment }}\",
            \"sections\": [{
              \"activityTitle\": \"🚨 Emergency Rollback Executed\",
              \"activitySubtitle\": \"Executive Flash News - ${{ needs.prepare-rollback.outputs.environment }}\",
              \"facts\": [
                {\"name\": \"Environment\", \"value\": \"${{ needs.prepare-rollback.outputs.environment }}\"},
                {\"name\": \"Rollback Version\", \"value\": \"${{ needs.prepare-rollback.outputs.rollback_version }}\"},
                {\"name\": \"Status\", \"value\": \"$STATUS\"},
                {\"name\": \"Initiated By\", \"value\": \"${{ github.actor }}\"},
                {\"name\": \"Reason\", \"value\": \"${{ github.event.inputs.reason }}\"}
              ],
              \"markdown\": true
            }],
            \"potentialAction\": [{
              \"@type\": \"OpenUri\",
              \"name\": \"View Workflow Run\",
              \"targets\": [{\"os\": \"default\", \"uri\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}]
            }]
          }" "${{ secrets.TEAMS_WEBHOOK_URL }}"

      - name: 📱 Create Incident Alert
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ needs.verify-rollback.result }}';
            const emoji = status === 'success' ? '✅' : '❌';

            await github.rest.issues.createComment({
              issue_number: context.issue.number || 1, // Use a default if no issue context
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
              ## ${emoji} Rollback Status Update

              **Status:** ${status.toUpperCase()}
              **Environment:** ${{ needs.prepare-rollback.outputs.environment }}
              **Version:** ${{ needs.prepare-rollback.outputs.rollback_version }}

              ${status === 'success'
                ? '🎉 Rollback completed successfully! System should be operational.'
                : '⚠️ Rollback encountered issues. Manual intervention may be required.'}

              **Next steps:**
              1. Monitor system health for 30 minutes
              2. Check user reports and metrics
              3. Plan resolution for original issue
              4. Schedule post-mortem meeting

              **Workflow:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              `
            });

  # ===== POST-ROLLBACK MONITORING =====
  post-rollback-monitoring:
    name: 📊 Post-Rollback Monitoring
    runs-on: ubuntu-latest
    needs: [prepare-rollback, execute-rollback, verify-rollback]
    if: needs.verify-rollback.result == 'success'

    steps:
      - name: 📊 Schedule Monitoring Tasks
        run: |
          echo "📊 Setting up post-rollback monitoring..."
          echo "Environment: ${{ needs.prepare-rollback.outputs.environment }}"
          echo "Version: ${{ needs.prepare-rollback.outputs.rollback_version }}"

          # Log key metrics to monitor
          cat << EOF > monitoring-checklist.md
          ## Post-Rollback Monitoring Checklist

          ### Immediate Monitoring (0-30 minutes)
          - [ ] Application availability
          - [ ] Response times
          - [ ] Error rates
          - [ ] User session creation

          ### Short-term Monitoring (30 minutes - 4 hours)
          - [ ] User feedback and reports
          - [ ] System performance metrics
          - [ ] Database connectivity
          - [ ] Integration points

          ### Follow-up Actions
          - [ ] Post-mortem meeting scheduled
          - [ ] Root cause analysis initiated
          - [ ] Fix planning for original issue
          - [ ] Documentation updated

          **Completed at:** $(date)
          EOF

          cat monitoring-checklist.md

      - name: 📎 Upload Monitoring Checklist
        uses: actions/upload-artifact@v3
        with:
          name: post-rollback-monitoring-checklist
          path: monitoring-checklist.md