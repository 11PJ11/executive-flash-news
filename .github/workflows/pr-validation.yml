name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

env:
  NODE_VERSION: '18.x'

jobs:
  # ===== PR QUALITY CHECK =====
  pr-quality-check:
    name: 🔍 PR Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Lint Changes Only
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- '*.js' '*.ts' '*.jsx' '*.tsx')

          if [ -n "$CHANGED_FILES" ]; then
            echo "Linting changed files:"
            echo "$CHANGED_FILES"
            echo "$CHANGED_FILES" | xargs npx eslint
          else
            echo "No JavaScript/TypeScript files changed"
          fi

      - name: 📝 Type Check
        run: npm run type-check

      - name: 🎨 Format Check
        run: npm run prettier:check

  # ===== INCREMENTAL TESTS =====
  incremental-tests:
    name: 🧪 Incremental Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [pr-quality-check]

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🧪 Run Affected Tests
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- 'src/**' 'tests/**')

          if [ -n "$CHANGED_FILES" ]; then
            echo "Running tests for changed files..."
            npm run test:coverage -- --findRelatedTests $CHANGED_FILES
          else
            echo "Running all tests as no specific files to target..."
            npm run test:coverage
          fi

      - name: 📊 Comment Coverage on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('coverage/coverage-summary.json')) {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json'));
              const total = coverage.total;

              const body = `
              ## 📊 Test Coverage Report

              | Metric | Percentage | Status |
              |--------|------------|--------|
              | Lines | ${total.lines.pct}% | ${total.lines.pct >= 50 ? '✅' : '❌'} |
              | Functions | ${total.functions.pct}% | ${total.functions.pct >= 50 ? '✅' : '❌'} |
              | Branches | ${total.branches.pct}% | ${total.branches.pct >= 50 ? '✅' : '❌'} |
              | Statements | ${total.statements.pct}% | ${total.statements.pct >= 50 ? '✅' : '❌'} |

              ${total.lines.pct >= 50 ? '🎉 Coverage meets minimum requirements!' : '⚠️ Coverage below minimum threshold (50%)'}
              `;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # ===== ATDD VALIDATION =====
  atdd-pr-check:
    name: 🎯 ATDD PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [pr-quality-check]

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🎯 Check ATDD Compliance
        run: |
          # Make script executable
          chmod +x scripts/*.sh 2>/dev/null || echo "Scripts directory not found"

          # Run ATDD compliance check
          if [ -f "scripts/atdd-compliance.sh" ]; then
            bash scripts/atdd-compliance.sh
          else
            echo "ATDD compliance script not found, skipping"
          fi

      - name: 📝 Check Test Naming Conventions
        run: |
          echo "🔍 Checking test naming conventions..."

          # Check for business-focused test names
          BUSINESS_TESTS=$(find tests -name "*.test.*" 2>/dev/null | xargs grep -c "should\|when\|given" 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
          TOTAL_TESTS=$(find tests -name "*.test.*" 2>/dev/null | xargs grep -c "test\|it\|describe" 2>/dev/null | awk '{sum+=$1} END {print sum+0}')

          if [ "$TOTAL_TESTS" -gt 0 ]; then
            BUSINESS_RATIO=$((BUSINESS_TESTS * 100 / TOTAL_TESTS))
            echo "Business-focused test ratio: ${BUSINESS_RATIO}%"

            if [ "$BUSINESS_RATIO" -lt 50 ]; then
              echo "⚠️ Low business-focused naming. Consider using Given-When-Then patterns."
            else
              echo "✅ Good business-focused test naming"
            fi
          fi

  # ===== SECURITY SCAN =====
  security-pr-scan:
    name: 🔒 Security PR Scan
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [pr-quality-check]

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔒 Security Audit
        run: npm audit --audit-level moderate

      - name: 🛡️ Security Lint
        run: |
          if npm run lint:security > /dev/null 2>&1; then
            npm run lint:security
          else
            echo "Security linting not configured"
          fi

  # ===== FORGE VALIDATION =====
  forge-pr-validation:
    name: ⚡ Forge PR Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [pr-quality-check]

    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: ⚡ Install Forge CLI
        run: npm install -g @forge/cli@latest

      - name: 📋 Validate Manifest
        run: |
          if [ -f "scripts/forge-validate.sh" ]; then
            chmod +x scripts/forge-validate.sh
            bash scripts/forge-validate.sh
          else
            forge lint
          fi

      - name: 🔧 Test Build
        run: |
          forge build --environment development --no-prompt

  # ===== PR SUMMARY =====
  pr-summary:
    name: 📋 PR Summary
    runs-on: ubuntu-latest
    needs: [pr-quality-check, incremental-tests, atdd-pr-check, security-pr-scan, forge-pr-validation]
    if: always()

    steps:
      - name: 📋 Generate PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Quality Check': '${{ needs.pr-quality-check.result }}',
              'Incremental Tests': '${{ needs.incremental-tests.result }}',
              'ATDD Validation': '${{ needs.atdd-pr-check.result }}',
              'Security Scan': '${{ needs.security-pr-scan.result }}',
              'Forge Validation': '${{ needs.forge-pr-validation.result }}'
            };

            let summary = '## 📋 Pull Request Validation Summary\n\n';
            let allPassed = true;

            for (const [check, result] of Object.entries(results)) {
              const icon = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏳';
              summary += `- ${icon} **${check}**: ${result}\n`;
              if (result === 'failure') allPassed = false;
            }

            summary += `\n${allPassed ? '🎉 All checks passed! Ready for review.' : '⚠️ Some checks failed. Please review and fix.'}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # ===== AUTO-MERGE PREPARATION =====
  auto-merge-ready:
    name: 🔄 Auto-Merge Ready
    runs-on: ubuntu-latest
    needs: [pr-quality-check, incremental-tests, atdd-pr-check, security-pr-scan, forge-pr-validation]
    if: |
      needs.pr-quality-check.result == 'success' &&
      needs.incremental-tests.result == 'success' &&
      needs.atdd-pr-check.result == 'success' &&
      needs.security-pr-scan.result == 'success' &&
      needs.forge-pr-validation.result == 'success' &&
      contains(github.event.pull_request.labels.*.name, 'auto-merge')

    steps:
      - name: 🏷️ Add Ready Label
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['ready-for-merge']
            });

      - name: ✅ Enable Auto-Merge
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            if (pullRequest.mergeable && pullRequest.mergeable_state === 'clean') {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                commit_title: `Auto-merge: ${pullRequest.title}`,
                merge_method: 'squash'
              });
            }